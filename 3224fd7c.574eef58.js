(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{131:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),b=a,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return t?r.a.createElement(m,c(c({ref:n},l),{},{components:t})):r.a.createElement(m,c({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},140:function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));var a=t(0),r=t.n(a),o=(t(55),function(){var e=Object(a.useRef)(null),n=Object(a.useCallback)((function(){var n;null===(n=e.current)||void 0===n||n.classList.toggle("transparent")}),[]);return r.a.createElement("div",null,r.a.createElement("video",{ref:e,src:"/img/transparent-video.webm",controls:!0,autoPlay:!0,loop:!0}),r.a.createElement("p",{className:"tr-centered",onClick:n},r.a.createElement("button",null,"Toggle transparency")))})},85:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(3),r=t(7),o=(t(0),t(131)),i=t(140),c={id:"transparent-videos",title:"Transparent videos"},s={unversionedId:"transparent-videos",id:"transparent-videos",isDocsHomePage:!1,title:"Transparent videos",description:"Chrome and Firefox support WebM videos with alpha channels. That means that on these browsers, you can embed videos with transparency.",source:"@site/docs/transparent-videos.mdx",slug:"/transparent-videos",permalink:"/docs/transparent-videos",editUrl:"https://github.com/JonnyBurger/remotion/edit/main/packages/docs/docs/transparent-videos.mdx",version:"current",sidebar:"someSidebar",previous:{title:"Encoding Guide",permalink:"/docs/encoding"},next:{title:"CLI options",permalink:"/docs/cli"}},l=[{value:"Creating a video with Alpha channel",id:"creating-a-video-with-alpha-channel",children:[]},{value:"Creating a fallback version",id:"creating-a-fallback-version",children:[]},{value:"See also",id:"see-also",children:[]}],p={toc:l};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Chrome and Firefox support WebM videos with alpha channels. That means that on these browsers, you can embed videos with transparency."),Object(o.b)("p",null,"If you are lucky enough to visit the website in one of those supported web browsers, check it out:"),Object(o.b)(i.a,{mdxType:"TransparentVideoDemo"}),Object(o.b)("h2",{id:"creating-a-video-with-alpha-channel"},"Creating a video with Alpha channel"),Object(o.b)("p",null,"In order to create a transparent video, you need at least version 1.4 of Remotion. Make sure to not set any background (use the checkerboard button to ensure your video is transparent). In order to render your videos transparent, you need to change 3 settings:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Render each frame as PNG."),Object(o.b)("li",{parentName:"ul"},"Use the VP8 or VP9 codec"),Object(o.b)("li",{parentName:"ul"},"Use the ",Object(o.b)("inlineCode",{parentName:"li"},"yuva420p")," pixel format.")),Object(o.b)("p",null,"If you want to set these options and persist them, add this to your ",Object(o.b)("inlineCode",{parentName:"p"},"remotion.config.ts")," file (create it if you don't yet have one);"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {Config} from 'remotion';\n\nConfig.Rendering.setImageFormat('png')\nConfig.Output.setPixelFormat('yuva420p')\nConfig.Output.setCodec('vp8')\n")),Object(o.b)("p",null,"You can also set the settings on the command line:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-console"}),"--image-format=png --pixel-format=yuva420p --codec=vp8\n")),Object(o.b)("h2",{id:"creating-a-fallback-version"},"Creating a fallback version"),Object(o.b)("p",null,"Given the poor browser support, consider making two versions of a video, one with alpha channel, and an opaque video as a fallback. You can achieve this in Remotion using standard React props:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx",metastring:"{2}","{2}":!0}),"const MyVideo: React.FC<{\n  transparent: boolean;\n}> = ({transparent}) => {\n  return (\n    <div style={{backgroundColor: transparent ? undefined : 'white', flex: 1}}>\n      {/* Omit opaque background based on `transparent` prop */}\n    </div>\n  )\n}\n")),Object(o.b)("p",null,"It's a good practice to set a default when defining the composition:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx",metastring:"{8-10}","{8-10}":!0}),'<Composition\n  id="my-video"\n  component={MyVideo}\n  width={1920}\n  height={1080}\n  fps={30}\n  durationInFrames={150}\n  defaultProps={{\n    transparent: true,\n  }}\n/>\n')),Object(o.b)("p",null,"You can then have separate render commands in your package.json:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"scripts": {\n  "render": "remotion render src/index.tsx my-video video.mp4",\n  "render-transparent": "remotion render src/index.tsx --image-format=png --pixel-format=yuva420p --codec=vp8 my-video video-transparent.webm"\n}\n')),Object(o.b)("p",null,"Now you can render two variants of the same video and serve a different one\nbased on browser support. You can use APIs like ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source"}),Object(o.b)("inlineCode",{parentName:"a"},"<source>"))," or the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event"}),Object(o.b)("inlineCode",{parentName:"a"},"canplay"))," event to determine programmatically if a browser is able to play a video."),Object(o.b)("h2",{id:"see-also"},"See also"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/cli"}),"CLI options")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/config"}),"Configuration option"))))}u.isMDXComponent=!0}}]);