(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{131:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),p=r,b=d["".concat(i,".").concat(p)]||d[p]||m[p]||o;return t?a.a.createElement(b,s(s({ref:n},l),{},{components:t})):a.a.createElement(b,s({ref:n},l))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(3),a=t(7),o=(t(0),t(131)),i={id:"random",title:"random()"},s={unversionedId:"random",id:"random",isDocsHomePage:!1,title:"random()",description:"The random() API will give your deterministic pseudorandom values. Unlike the Math.random() function, Remotions function takes in a seed which can be a number or a string. If the seed is the same, the output is always the same.",source:"@site/docs/random.md",slug:"/random",permalink:"/docs/random",editUrl:"https://github.com/JonnyBurger/remotion/edit/main/packages/docs/docs/random.md",version:"current",sidebar:"someSidebar",previous:{title:"interpolate()",permalink:"/docs/interpolate"},next:{title:"registerRoot()",permalink:"/docs/register-root"}},c=[{value:"Use cases",id:"use-cases",children:[]},{value:"Accessing true randomness",id:"accessing-true-randomness",children:[]},{value:"See also",id:"see-also",children:[]}],l={toc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"random()")," API will give your deterministic pseudorandom values. Unlike the ",Object(o.b)("inlineCode",{parentName:"p"},"Math.random()")," function, Remotions function takes in a seed which can be a ",Object(o.b)("inlineCode",{parentName:"p"},"number")," or a ",Object(o.b)("inlineCode",{parentName:"p"},"string"),". If the seed is the same, the output is always the same."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const rand = random(1); // 0.07301638228818774\nconst rand = random(1); // still 0.07301638228818774\n\n\nconst randomCoordinates = new Array(10).fill(true).map((a, i) => {\n  return {\n    x: random(`random-x-${i}`),\n    y: random(`random--${i}`),\n  };\n}); // will always be [{x: 0.2887063352391124, y: 0.18660089606419206}, ...]\n\nrandom() // Error: random() argument must be a number or a string\n")),Object(o.b)("h2",{id:"use-cases"},"Use cases"),Object(o.b)("p",null,"Randomness can be used to create to create interesting visualizations, such as particle effect for example. Since Remotion renders a video on multiple threads and opens the website multiple times, the value returned by a ",Object(o.b)("inlineCode",{parentName:"p"},"Math.random()")," call will not be the same across multiple threads, making it hard to create animations based on randomness. Using this API will ensure that the pseudorandom number will be the same always."),Object(o.b)("h2",{id:"accessing-true-randomness"},"Accessing true randomness"),Object(o.b)("p",null,"Calling ",Object(o.b)("inlineCode",{parentName:"p"},"Math.random()")," results in an ESLint warning in Remotion since often it leads to bugs in rendering. If you are sure you want a true random number, and want to bypass this message without adding an ignore comment, use ",Object(o.b)("inlineCode",{parentName:"p"},"random(null)")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"// Passing null will result in a different value every time.\nrandom(null) === random(null) // false\n")),Object(o.b)("h2",{id:"see-also"},"See also"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/using-randomness"}),"Using randomness"))))}u.isMDXComponent=!0}}]);